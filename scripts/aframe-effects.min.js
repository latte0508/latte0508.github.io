!function(e){var t={};function i(r){if(t[r])return t[r].exports;var a=t[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,i),a.loaded=!0,a.exports}i.m=e,i.c=t,i.p="",i(0)}([function(e,t,i){if(!window.AFRAME){var r=function(e,t){this.el=e,this.el,this.id=t,this.attrName=this.name+(t?"__"+t:""),this.el.components[this.attrName]=this,this.data={}},a=function(e){this.el=this.sceneEl=e,this.el.systems[this.name]=this};AFRAME={components:{},systems:{},registerShader:function(){}},AFRAME.registerComponent=function(e,t){var i,a={};return Object.keys(t).forEach((function(e){a[e]={value:t[e],writable:!0}})),((i=function(e,t,i){r.call(this,e,t,i)}).prototype=Object.create(r.prototype,a)).name=e,i.prototype.constructor=i,AFRAME.components[e]=i,i},AFRAME.registerSystem=function(e,t){var i,r={};return Object.keys(t).forEach((function(e){r[e]={value:t[e],writable:!0}})),((i=function(e,t,i){a.call(this,e,t,i)}).prototype=Object.create(a.prototype,r)).name=e,i.prototype.constructor=i,AFRAME.systems[e]=i,i};var s=function(e,t,i){this.sceneEl=this,this.renderTarget=null,this.renderer=e,this.object3D=t,this.cameras=Array.isArray(i)?i:[i],this.components={},this.systems={},this.isPlaying=!0,this.systems.effects=new AFRAME.systems.effects(this),this.systems.effects.init()};s.prototype=Object.create({},{chain:{value:function(e){var t=this.systems.effects,i=t.data;t.data=e,t.update(i),t.tick(0,0)}},camera:{set:function(e){this.cameras=Array.isArray(e)?e:[e]},get:function(){return this.cameras[0]}},scene:{set:function(e){this.object3D=e},get:function(){return this.object3D}},init:{value:function(e){this.remove(e);var t=e.split("__"),i=AFRAME.components[t[0]];if(!i)return null;var r=new i(this,t[1]);if(r.schema.type||r.schema.default)r.data=r.schema.default;else for(var a in r.schema)r.data[a]=r.schema[a].default;return r.init&&r.init(),r.update&&r.update({}),r}},update:{value:function(e,t){var i=this.components[e];if(i||(i=this.init(e)),i&&void 0!==t){var r=i.data,a=i.data;i.schema;if(i.schema.type||i.schema.default)i.data=t;else for(var s in r={},a)r[s]=a[s],t[s]&&(a[s]=t[s]);i.update&&i.update(r)}}},remove:{value:function(e){var t=this.components[e];t&&t.remove&&t.remove(),delete this.components[e]}},render:{value:function(e){var t=this.components,i=this.systems.effects,r=this.time?e-this.time:0;for(var a in this.time=e,t){(s=t[a]).tick&&s.tick(e,r)}for(var a in i.tick(e,r),i.cameras=this.cameras,t){var s;(s=t[a]).tock&&s.tock(e,r)}i.tock(e,r)}}}),window.AFRAME.Effects=s}i(1),i(3),i(17)},function(e,t,i){i(2)},function(e,t){AFRAME.registerSystem("effects",{schema:{type:"array",default:[]},init:function(){this.effects={},this.passes=[],this._passes=[],this.cameras=[],this.setupPostState(),this.needsOverride=!0,this.lightComponents=[],this.LightState={rows:0,cols:0,width:0,height:0,tileData:{value:null},tileTexture:{value:null},lightTexture:{value:new THREE.DataTexture(new Float32Array(256),32,2,THREE.RGBAFormat,THREE.FloatType)}}},update:function(){this.needsUpdate=!0},addLight:function(e){this.lightComponents.push(e)},removeLight:function(e){var t=this.lightComponents.indexOf(e);this.lightComponents.splice(t)},setupPostState:function(){this.renderTarget=new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.renderTarget.texture.generateMipmaps=!1,this.renderTarget.depthBuffer=!0,this.renderTarget.depthTexture=new THREE.DepthTexture,this.renderTarget.depthTexture.type=THREE.UnsignedShortType,this.renderTarget.depthTexture.minFilter=THREE.LinearFilter,this.renderTarget.stencilBuffer=!1,this.scene=new THREE.Scene,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad),this.sceneLeft=new THREE.Scene,this.quadLeft=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quadLeft.geometry.attributes.uv.array.set([0,1,.5,1,0,0,.5,0]),this.quadLeft.frustumCulled=!1,this.sceneLeft.add(this.quadLeft),this.sceneRight=new THREE.Scene,this.quadRight=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quadRight.geometry.attributes.uv.array.set([.5,1,1,1,.5,0,1,0]),this.quadRight.frustumCulled=!1,this.sceneRight.add(this.quadRight),this.targets=[new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat})],this.tDiffuse={type:"t",value:null},this.tDepth={type:"t",value:this.renderTarget.depthTexture},this.cameraFar={type:"f",value:0},this.cameraNear={type:"f",value:0},this.time={type:"f",value:0},this.timeDelta={type:"f",value:0},this.uvClamp={type:"v2",value:this.uvBoth},this.resolution={type:"v4",value:new THREE.Vector4}},vertexShader:["#include <common>","varying vec2 vUv;","void main() {","   vUv = uv;","   gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),uvLeft:new THREE.Vector2(0,.5),uvRight:new THREE.Vector2(.5,1),uvBoth:new THREE.Vector2(0,1),parseToken:/([#a-z0-9\-\_]+)\.{0,1}([#a-z0-9\-\_]*)\s*\({0,1}\s*([\$a-z0-9\-\_\.\s]*)\){0,1}([\!\?]{0,1})/i,renderPass:function(e,t,i,r){var a=this.sceneEl.renderer;this.quad.material=e;var s="function"==typeof i,o=t||a.getSize();this.resolution.value.set(o.width,o.height,1/o.width,1/o.height);var n=a.autoClear;function l(e,i,r,s){t?(t.viewport.set(e,i,r,s),t.scissor.set(e,i,r,s)):(a.setViewport(e,i,r,s),a.setScissor(e,i,r,s))}a.autoClear=!1,i?this.cameras.length>1?(this.quadLeft.material=e,this.uvClamp.value=this.uvLeft,l(0,0,Math.round(.5*o.width),o.height),s&&i(e,this.cameras[0],-1),a.render(this.sceneLeft,this.camera,t,n||r),this.quadRight.material=e,this.uvClamp.value=this.uvRight,l(Math.round(.5*o.width),0,Math.round(.5*o.width),o.height),s&&i(e,this.cameras[1],1),a.render(this.sceneRight,this.camera,t),this.uvClamp.value=this.uvBoth,l(0,0,o.width,o.height)):(l(0,0,o.width,o.height),s&&i(e,this.sceneEl.camera,0),a.render(this.scene,this.camera,t,n||r)):(l(0,0,o.width,o.height),a.render(this.scene,this.camera,t,n||r)),a.autoClear=n},materialize:function(e){var t=["uniform vec2 uvClamp;","vec4 textureVR( sampler2D sampler, vec2 uv ) {"," return texture2D(sampler, vec2(clamp(uv.x, uvClamp.x, uvClamp.y), uv.y));","} ",e.fragmentShader].join("\n");return e.uniforms.uvClamp=this.uvClamp,new THREE.ShaderMaterial({uniforms:e.uniforms,vertexShader:e.vertexShader||this.vertexShader,fragmentShader:t,depthWrite:!1,depthTest:!1,blending:THREE.NoBlending,fog:!1,extensions:{derivatives:!0},defines:e.defines||{}})},fuse:function(e,t){if(e.length){var i,r=this,a=0,s=[],o=[],n=[],l={},u=!1,c=!1,h={time:this.time,timeDelta:this.timeDelta,resolution:this.resolution};e.forEach((function(e){var t=!0,i=!1,o=[];if("string"==typeof e){var f=r.parseToken.exec(e);if(!f)return;t="!"!==f[4],i="?"===f[4],e=f[1];var m=f[2];if("#"===e[0]){var d=document.querySelector(e);if(!d)return;e={attrName:[e.replace("#","script_"),"_",a++,"_"].join(""),fragment:m?d[m]instanceof Document?d[m].body.textContent:d[m]:d.textContent,depth:void 0!==d.dataset.depth,diffuse:void 0!==d.dataset.diffuse,includes:d.dataset.includes?d.dataset.includes.trim().split(" "):null,defaults:d.dataset.defaults?d.dataset.defaults.trim().split(" "):null}}else{if(!(e=r.effects[e]))return;if(m){if(!(e=e.exports?e.exports[m]:null))return;e.attrName=f[1]+"_"+m+"_"}}f[3]&&(o=f[3].trim().split(" "))}var v=(e.attrName?e.attrName:"undefined_"+a++)+"_";if(v=v.replace("__","_"),e.defaults&&e.defaults.forEach((function(e,t){var i=o[t];s.push(["#define $",t," ",i&&"$"!==i?i:e].join("").replace(/\$/g,v).replace("__","_"))})),e.diffuse&&(c=!0),e.depth&&(u=!0),e.fragment&&s.push(e.fragment.replace(/\$/g,v)),e.uniforms)for(var p in e.uniforms)h[v+p]=e.uniforms[p];e.includes&&e.includes.forEach((function(e){l[e]=!0})),t&&n.push(["  ",v,"main(",i?"origColor, color":"color, origColor",", vUv, depth);"].join(""))}));var f={i:"int",f:"float",t:"sampler2D",v2:"vec2",v3:"vec3",c:"vec3",v4:"vec4",m2:"mat2",m3:"mat3",m4:"mat4",b:"bool"};for(i in l)o.push("#include <"+i+">");var m=["void main () {"];for(i in h.tDiffuse=this.tDiffuse,c?m.push("  vec4 color = texture2D(tDiffuse, vUv);"):m.push("  vec4 color = vec4(0.0);"),m.push("  vec4 origColor = color;"),h.tDepth=this.tDepth,h.cameraFar=this.cameraFar,h.cameraNear=this.cameraNear,u?m.push("  float depth = texture2D(tDepth, vUv).x;"):m.push("  float depth = 0.0;"),h){var d=h[i];o.push(["uniform",f[d.type],i,";"].join(" "))}o.push("varying vec2 vUv;");var v=[o.join("\n"),s.join("\n"),"\n",m.join("\n"),n.join("\n"),t?"  gl_FragColor = color;":"  gl_FragColor = vec4(color.rgb, 1.0);","}"].join("\n"),p=this.materialize({fragmentShader:v,uniforms:h});return this.sceneEl.components.debug&&console.log(v,p),p}},rebuild:function(){var e=this,t=[],i=[];function r(){i.length&&(t.push({pass:a(e.fuse(i),!0)}),i=[])}function a(t,i,r){return{render:function(i,a,s){e.renderPass(t,a,r)},dispose:function(){i&&t.dispose()}}}this.passes.forEach((function(e){e.dispose&&e.dispose()})),this.data.forEach((function(s){if(s){var o,n,l=e.parseToken.exec(s);l&&l[1]&&(n=l[1],(o=e.effects[n])?o.pass?(r(),t.push({pass:o.pass,behavior:o})):o.material?(r(),t.push({pass:a(o.material,!1,o.vr),behavior:o})):i.push(s):i.push(s))}else r()})),r(),this.needsUpdate=!1,this.passes=t},isActive:function(e,t){var i=this.sceneEl;if(e.bypass)return!1;if(!!!i.renderTarget)return!1;if(t&&(this.needsResize||e.needsResize)&&e.setSize){var r=i.renderer.getSize();e.setSize(r.width,r.height),delete e.needsResize}return!0},register:function(e){this.effects[e.attrName]=e,this.needsUpdate=!0},unregister:function(e){delete this.effects[e.attrName],this.needsUpdate=!0},tick:function(e,t){var i=this,r=this.sceneEl,a=r.renderer,s=(r.effect,this.renderTarget),o=this.targets,n=r.object3D;if(s&&a){if(this.needsOverride){if(n.onBeforeRender)n.onBeforeRender=function(e,t,r){var a=e.getSize();a.width===s.width&&a.height===s.height||(s.setSize(a.width,a.height),o[0].setSize(a.width,a.height),o[1].setSize(a.width,a.height),i.resolution.value.set(a.width,a.height,1/a.width,1/a.height),i.needsResize=!0,i.resizeTiles()),r instanceof THREE.ArrayCamera?i.cameras=r.cameras:i.cameras.push(r),i.tileLights(e,t,r)};else{var l=a.render;a.render=function(e,t,r,n){if(r===s){var u=a.getSize();u.width===s.width&&u.height===s.height||(s.setSize(u.width,u.height),o[0].setSize(u.width,u.height),o[1].setSize(u.width,u.height),i.resolution.value.set(u.width,u.height,1/u.width,1/u.height),i.needsResize=!0),i.cameras.push(t)}l.call(a,e,t,r,n)}}this.needsOverride=!1}this.cameras=[],this.time.value=e/1e3,this.timeDelta.value=t/1e3,!0===this.needsUpdate&&this.rebuild(),this.setupPasses(),this.tDiffuse.value=this.renderTarget.texture,this.tDepth.value=this.renderTarget.depthTexture;var u=this.sceneEl.camera;this.cameraFar.value=u.far,this.cameraNear.value=u.near}},setupPasses:function(){var e=[],t=this.renderTarget;this.passes.forEach((function(t){t.behavior&&!0===t.behavior.bypass||e.push(t)})),this.sceneEl.renderTarget=e.length&&this.sceneEl.isPlaying?t:null,this._passes=e},tock:function(){var e=this.sceneEl,t=e.renderer,i=this;if(e.renderTarget){var r=e.renderTarget,a=this.targets;this._passes.forEach((function(e,s){var o=s?a[1&s]:r;i.tDiffuse.value=o.texture,e.behavior&&e.behavior.resize&&i.isActive(e.behavior,!0),e.pass.render(t,s<i._passes.length-1?a[s+1&1]:null,o)})),this.needsResize=!1}},resizeTiles:function(){var e=this.LightState,t=e.width,i=e.height;e.cols=Math.ceil(t/32),e.rows=Math.ceil(e.height/32),e.tileData.value=[t,i,.5/Math.ceil(t/32),.5/Math.ceil(i/32)],e.tileTexture.value=new THREE.DataTexture(new Uint8Array(e.cols*e.rows*4),e.cols,e.rows)},tileLights:function(e,t,i){if(i.projectionMatrix){var r=this.LightState,a=this.lightComponents,s=(e.getSize(),r.tileTexture.value.image.data),o=r.lightTexture.value.image.data,n=i.matrixWorldInverse;s.fill(0);var l=new THREE.Vector3;(i instanceof THREE.ArrayCamera?[[.5,0,i.cameras[0]],[.5,.5,i.cameras[1]]]:[1,0,i]).forEach((function(e){a.forEach((function(t,i){l.setFromMatrixPosition(t.el.object3D.matrixWorld);var a=r.width*e[0],u=r.width*e[1],c=self.lightBounds(e[2],l,t.data.radius,a);if(l.applyMatrix4(n),l.toArray(o,4*i),o[4*i+3]=t.data.radius,t.data.color.toArray(o,128+4*i),o[128+4*i+3]=t.data.decay,!(c[1]<0||c[0]>a||c[3]<0||c[2]>r.height)){c[0]<0&&(c[0]=0),c[1]>a&&(c[1]=a),c[2]<0&&(c[2]=0),c[3]>r.height&&(c[3]=r.height);for(var h=Math.floor(i/8),f=7-i%8,m=Math.floor(c[2]/32);m<=Math.ceil(c[3]/32);m++)for(var d=Math.floor((c[0]+u)/32);d<=Math.ceil((c[1]+u)/32);d++)s[4*(r.cols*m+d)+h]|=1<<f}}))})),r.tileTexture.value.needsUpdate=!0,r.lightTexture.value.needsUpdate=!0}},lightBounds:(v=new THREE.Vector3,function(e,t,i,r){for(var a=this.LightState,s=r,o=0,n=a.height,l=0,u=r/2,c=a.height/2,h=0;h<8;h++){v.copy(t),v.x+=1&h?i:-i,v.y+=2&h?i:-i,v.z+=4&h?i:-i;var f=v.project(e),m=f.x*u+u,d=f.y*c+c;s=Math.min(s,m),o=Math.max(o,m),n=Math.min(n,d),l=Math.max(l,d)}return[s,o,n,l]})})},function(e,t,i){i(4),i(5),i(6),i(8),i(10),i(11),i(12),i(13),i(16)},function(e,t){AFRAME.registerComponent("outline",{multiple:!0,schema:{enabled:{default:!0},color:{type:"color",default:"#000000"},width:{type:"vec2",default:new THREE.Vector2(1,1)},range:{type:"vec2",default:new THREE.Vector2(0,1500)},strength:{type:"number",default:1},ratio:{type:"number",default:.5},smooth:{default:!1}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTarget=new THREE.WebGLRenderTarget(1,1,e),this.blurTarget=new THREE.WebGLRenderTarget(1,1,e),this.needsResize=!0,this.resolution={type:"v4",value:new THREE.Vector4},this.tockUniforms={resolution:this.resolution,color:{type:"c",value:new THREE.Color},width:{type:"v2",value:null},range:{type:"v2",value:null},strength:{type:"f",value:1}},this.blurDirection={type:"v2",value:new THREE.Vector2},this.exports={sobel:{fragment:this.sobel,uniforms:this.tockUniforms,includes:["packing"],depth:!0},blur:{fragment:this.blur,uniforms:{resolution:this.tockUniforms.resolution,direction:this.blurDirection},diffuse:!0}},this.currentMaterial=this.system.fuse([this.exports.sobel],!0),this.blurMaterial=this.system.fuse([this.exports.blur],!0),this.uniforms={texture:{type:"t",value:this.renderTarget.texture}},this.system.register(this)},update:function(e){this.bypass=!this.data.enabled,this.tockUniforms.color.value.set(this.data.color),this.tockUniforms.width.value=this.data.width,this.tockUniforms.range.value=this.data.range,this.tockUniforms.strength.value=1/this.data.strength},setSize:function(e,t){e=Math.round(e*this.data.ratio),t=Math.round(t*this.data.ratio),this.renderTarget.setSize(e,t),this.blurTarget.setSize(e,t),this.resolution.value.set(e,t,1/e,1/t)},tock:function(){this.system.isActive(this,!0)&&(this.system.renderPass(this.currentMaterial,this.renderTarget),this.system.tDiffuse.value=this.renderTarget,this.data.smooth&&(this.blurDirection.value.set(1,0),this.system.renderPass(this.blurMaterial,this.blurTarget),this.system.tDiffuse.value=this.blurTarget,this.blurDirection.value.set(0,1),this.system.renderPass(this.blurMaterial,this.renderTarget)))},remove:function(){this.system.unregister(this)},diffuse:!0,sobel:["mat3 $G[2];","const mat3 $g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );","const mat3 $g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","vec3 I[3];","float cnv[2];","float d;","$G[0] = $g0;","$G[1] = $g1;","for (float i=0.0; i<3.0; i++)","for (float j=0.0; j<3.0; j++) {","           d = texture2D(tDepth, uv + resolution.zw * vec2(i-1.0,j-1.0) ).x;","           d = perspectiveDepthToViewZ(d, cameraNear, cameraFar); ","\t\t\tI[int(i)][int(j)] = viewZToOrthographicDepth(d, cameraNear, cameraFar);","}","for (int i=0; i<2; i++) {","float dp3 = dot($G[i][0], I[0]) + dot($G[i][1], I[1]) + dot($G[i][2], I[2]);","cnv[i] = dp3 * dp3; ","}","color = vec4($color, sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));","} "].join("\n"),blur:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","color.a *= 0.44198;","color.a += texture2D(tDiffuse, uv + ($direction * $resolution.zw )).a * 0.27901;","color.a += texture2D(tDiffuse, uv - ($direction * $resolution.zw )).a * 0.27901;","}"].join("\n"),fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","\tvec4 texel = texture2D($texture, uv);","   color.rgb = mix(color.rgb, texel.rgb, smoothstep(0.1,0.3,texel.a));","}"].join("\n")})},function(e,t){AFRAME.registerComponent("film",{multiple:!0,schema:{speed:{default:1},nIntensity:{default:.5},sIntensity:{default:.05},sCount:{default:4096}},init:function(){this.uniforms={speed:{type:"f",value:0},nIntensity:{type:"f",value:.5},sIntensity:{type:"f",value:.05},sCount:{type:"f",value:4096}},this.system=this.el.sceneEl.systems.effects,this.system.register(this)},update:function(){var e=this.data,t=this.uniforms;for(var i in t)e[i]&&(t[i].value=e[i])},remove:function(){this.system.unregister(this)},includes:["common"],diffuse:!0,fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   vec4 cTextureScreen = color;","   float dx = rand( uv + mod(time, 3.14) * $speed );","   vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );","   vec2 sc = vec2( sin( uv.y * $sCount ), cos( uv.y * $sCount ) );","   cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * $sIntensity;","   cResult = cTextureScreen.rgb + clamp( $nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );","   color.rgb =  cResult; //cResult;","}"].join("\n")})},function(e,t,i){var r=i(7);AFRAME.registerComponent("fxaa",{schema:{default:!0},init:function(){this.system=this.el.sceneEl.systems.effects,this.material=new THREE.ShaderMaterial({fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,uniforms:{tDiffuse:this.system.tDiffuse,resolution:{type:"v2",value:new THREE.Vector2}}}),this.system.register(this),this.needsResize=!0},update:function(){this.bypass=!this.data},setSize:function(e,t){this.material.uniforms.resolution.value.set(e,t)},resize:!0,remove:function(){this.material.dispose(),this.system.unregister(this)}})},function(e,t){e.exports={uniforms:{tDiffuse:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2}},vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform vec2 resolution;\n\nvoid main() {\n  vUv = uv;\n  vec2 fragCoord = uv * resolution;\n  vec2 inverseVP = 1.0 / resolution.xy;\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n  v_rgbM = vec2(fragCoord * inverseVP);\n\n  gl_Position = projectionMatrix *\n              modelViewMatrix *\n              vec4(position,1.0);\n}\n",fragmentShader:'#define GLSLIFY 1\nvarying vec2 vUv;\n\n//texcoords computed in vertex step\n//to avoid dependent texture reads\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\n//make sure to have a resolution uniform set to the screen size\nuniform vec2 resolution;\nuniform sampler2D tDiffuse;\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it\'s\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid main() {\n  vec2 fragCoord = vUv * resolution;   \n  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n'}},function(e,t,i){i(9);var r=new THREE.Vector2(1,0),a=new THREE.Vector2(0,1);AFRAME.registerComponent("bloom",{multiple:!0,schema:{enable:{default:!0},strength:{default:1},radius:{default:.4},threshold:{default:.8},filter:{type:"array",default:[]}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5,this.renderTargetBright=new THREE.WebGLRenderTarget(1,1,e),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(var t=0;t<this.nMips;t++){var i;(i=new THREE.WebGLRenderTarget(1,1,e)).texture.name="UnrealBloomPass.h"+t,i.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(i),(i=new THREE.WebGLRenderTarget(1,1,e)).texture.name="UnrealBloomPass.v"+t,i.texture.generateMipmaps=!1,this.renderTargetsVertical.push(i)}this.exports={filter:{uniforms:{luminosityThreshold:{type:"f",value:1},smoothWidth:{type:"f",value:.01},defaultColor:{type:"c",value:new THREE.Color(0)},defaultOpacity:{type:"f",value:1}},diffuse:!0,fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","vec4 texel = color;","float v = dot( texel.xyz, vec3( 0.299, 0.587, 0.114 ) );","vec4 outputColor = vec4( $defaultColor.rgb, $defaultOpacity );","float alpha = smoothstep( $luminosityThreshold, $luminosityThreshold + $smoothWidth, v );","color = mix( outputColor, texel, alpha );","}"].join("\n")}},this.materialHighPassFilter=null,this.separableBlurMaterials=[];var r=[3,5,7,9,11];for(t=0;t<this.nMips;t++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(r[t])),this.separableBlurMaterials[t].uniforms.texSize.value=new THREE.Vector2(1,1);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.needsUpdate=!0;this.compositeMaterial.uniforms.bloomFactors.value=[1,.8,.6,.4,.2],this.bloomTintColors=[new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,this.oldClearColor=new THREE.Color,this.uniforms={texture:{type:"t",value:this.renderTargetsHorizontal[0]}},this.needsResize=!0,this.system.register(this)},update:function(e){if(e.filter!==this.data.filter){this.materialHighPassFilter&&this.materialHighPassFilter.dispose();var t=this.data.filter.length?this.data.filter:[this.exports.filter];this.materialHighPassFilter=this.system.fuse(t,!1)}},tock:function(e){if(this.data.enable&&this.system.isActive(this,!0)){var t=this.el.sceneEl,i=t.renderer,s=t.renderTarget;this.oldClearColor.copy(i.getClearColor()),this.oldClearAlpha=i.getClearAlpha();var o=i.autoClear;i.autoClear=!1,i.setClearColor(new THREE.Color(0,0,0),0),this.system.tDiffuse.value=s.texture,this.exports.filter.uniforms.luminosityThreshold.value=this.data.threshold,this.system.renderPass(this.materialHighPassFilter,this.renderTargetBright,null,!1);for(var n=this.renderTargetBright,l=0;l<this.nMips;l++)this.separableBlurMaterials[l].uniforms.colorTexture.value=n.texture,this.separableBlurMaterials[l].uniforms.direction.value=r,this.system.renderPass(this.separableBlurMaterials[l],this.renderTargetsHorizontal[l],!0),this.separableBlurMaterials[l].uniforms.colorTexture.value=this.renderTargetsHorizontal[l].texture,this.separableBlurMaterials[l].uniforms.direction.value=a,this.system.renderPass(this.separableBlurMaterials[l],this.renderTargetsVertical[l],!0),n=this.renderTargetsVertical[l];this.compositeMaterial.uniforms.bloomStrength.value=this.data.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.data.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,this.system.renderPass(this.compositeMaterial,this.renderTargetsHorizontal[0],null),i.setClearColor(this.oldClearColor,this.oldClearAlpha),i.autoClear=o}},setSize:function(e,t){var i=Math.round(e/2),r=Math.round(t/2);this.renderTargetBright.setSize(i,r);for(var a=0;a<this.nMips;a++)this.renderTargetsHorizontal[a].setSize(i,r),this.renderTargetsVertical[a].setSize(i,r),this.separableBlurMaterials[a].uniforms.texSize.value=new THREE.Vector2(i,r),i=Math.round(i/2),r=Math.round(r/2)},remove:function(){this.system.unregister(this);for(var e=0;e<this.renderTargetsHorizontal.length;e++)this.renderTargetsHorizontal[e].dispose();for(e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose()},getSeperableBlurMaterial:function(e){return this.system.materialize({defines:{KERNEL_RADIUS:e,SIGMA:e},uniforms:{colorTexture:{value:null},texSize:{value:new THREE.Vector2(.5,.5)},direction:{value:new THREE.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\tvUv = uv;\n\t\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\t\tuniform vec2 texSize;\t\t\t\t\tuniform vec2 direction;\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t\t}\t\t\t\t\tvoid main() {\n\t\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\t\tvec3 sample1 = textureVR( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\t\tvec3 sample2 = textureVR( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t\t}\t\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t\t}"})},getCompositeMaterial:function(e){return new THREE.ShaderMaterial({defines:{NUM_MIPS:e},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\tvUv = uv;\n\t\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\t\tuniform float bloomStrength;\t\t\t\t\tuniform float bloomRadius;\t\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t\t \t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t\t}"})},diffuse:!0,defaults:["1.0"],fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","   color.rgb += texture2D($texture, uv).rgb;","}"].join("\n")})},function(e,t){e.exports={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{type:"t",value:null},luminosityThreshold:{type:"f",value:1},smoothWidth:{type:"f",value:1},defaultColor:{type:"c",value:new THREE.Color(0)},defaultOpacity:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec3 defaultColor;","uniform float defaultOpacity;","uniform float luminosityThreshold;","uniform float smoothWidth;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float v = dot( texel.xyz, luma );","vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );","float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );","gl_FragColor = mix( outputColor, texel, alpha );","}"].join("\n")}},function(e,t){AFRAME.registerComponent("colors",{multiple:!0,schema:{mode:{default:"map"},lut:{type:"selector"},lutClamp:{default:!1},lutFlip:{default:!1},add:{type:"vec3",default:new THREE.Vector3(0,0,0)},mul:{type:"vec3",default:new THREE.Vector3(1,1,1)},pow:{type:"vec3",default:new THREE.Vector3(1,1,1)},left:{type:"vec3",default:new THREE.Vector3(0,0,0)},right:{type:"vec3",default:new THREE.Vector3(1,1,1)},min:{type:"vec3",default:new THREE.Vector3(0,0,0)},max:{type:"vec3",default:new THREE.Vector3(1,1,1)},quant:{type:"vec3",default:new THREE.Vector3(.2,.2,.2)},orig:{type:"vec3",default:new THREE.Vector3(1,1,1)},red:{type:"vec3",default:new THREE.Vector3(1,0,0)},green:{type:"vec3",default:new THREE.Vector3(0,.5,.5)},blue:{type:"vec3",default:new THREE.Vector3(0,.5,.5)}},init:function(){this.system=this.el.sceneEl.systems.effects,this.uniforms={add:{type:"v3",value:null},mul:{type:"v3",value:null},pow:{type:"v3",value:null},left:{type:"v3",value:null},right:{type:"v3",value:null},min:{type:"v3",value:null},max:{type:"v3",value:null},quant:{type:"v3",value:null},orig:{type:"v3",value:null},red:{type:"v3",value:null},green:{type:"v3",value:null},blue:{type:"v3",value:null},texture:{type:"t",value:new THREE.Texture(void 0,void 0,void 0,void 0,THREE.NearestFilter,THREE.NearestFilter)}},this.rebuild(),this.system.register(this)},update:function(e){var t=this.data,i=this.uniforms;for(var r in i)void 0!==t[r]&&(i[r].value=t[r]);if(this.data.lutFlip===e.lutFlip&&this.data.lutClamp===e.lutClamp&&this.data.mode==e.mode||this.rebuild(),this.data.lut!==e.lut){const e=this.uniforms.texture.value;e.image=this.data.lut,e.needsUpdate=!0}},remove:function(){this.system.unregister(this)},rebuild:function(){for(var e=[],t=this.data.mode,i=0;i<t.length;i++){var r=this.ops[t[i]];r&&e.push(r)}this.fragment=[this.data.lutClamp?"":"#define $LUT_NO_CLAMP 1",this.data.lutFlip?"#define $LUT_FLIP_Y 1":"",this.preFragment,e.join("\n"),"}"].join("\n"),this.system.needsUpdate=!0},ops:{m:"color.rgb *= $mul;",a:"color.rgb += $add;",p:"color.rgb = pow(color.rgb, $pow);",h:"color.rgb = $rgb2hsv(color.rgb);",r:"color.rgb = $hsv2rgb(color.rgb);",s:"color.rgb = smoothstep($left, $right, color.rgb);",l:"color.rgb = $lut(color).rgb;",q:"color.rgb = floor(color.rgb / $quant) * $quant;",c:"color.rgb = clamp(color.rgb, $min, $max);",g:"color.rgb = vec3(dot(color.rgb, vec3(0.299, 0.587, 0.114)));",o:"color.rgb = mix(color.rgb, orig.rgb, $orig);",t:"color.rgb = vec3(dot(color.rgb, $red), dot(color.rgb, $green), dot(color.rgb, $blue));",b:"color.rgb = color.rgb;"},diffuse:!0,preFragment:["vec4 $lut(vec4 textureColor) {","    #ifndef $LUT_NO_CLAMP","        textureColor = clamp(textureColor, 0.0, 1.0);","    #endif","    mediump float blueColor = textureColor.b * 63.0;","    mediump vec2 quad1;","    quad1.y = floor(floor(blueColor) / 8.0);","    quad1.x = floor(blueColor) - (quad1.y * 8.0);","    mediump vec2 quad2;","    quad2.y = floor(ceil(blueColor) / 8.0);","    quad2.x = ceil(blueColor) - (quad2.y * 8.0);","    highp vec2 texPos1;","    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);","    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);","    #ifdef $LUT_FLIP_Y","        texPos1.y = 1.0-texPos1.y;","    #endif","    highp vec2 texPos2;","    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);","    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);","    #ifdef $LUT_FLIP_Y","        texPos2.y = 1.0-texPos2.y;","    #endif","    lowp vec4 newColor1 = texture2D($texture, texPos1);","    lowp vec4 newColor2 = texture2D($texture, texPos2);","    lowp vec4 newColor = mix(newColor1, newColor2, fract(blueColor));","    return newColor;","}","vec3 $rgb2hsv(vec3 c){","    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);","    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));","    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));","    float d = q.x - min(q.w, q.y);","    float e = 1.0e-10;","    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);","}","vec3 $hsv2rgb(vec3 c)","{","    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);","    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);","    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","vec3 orig = color.rgb;"].join("\n")})},function(e,t){AFRAME.registerComponent("glitch",{schema:{default:!0},init:function(){this.system=this.el.sceneEl.systems.effects,this.uniforms={tDisp:{type:"t",value:this.generateHeightmap(64)},amount:{type:"f",value:.08},angle:{type:"f",value:.02},seed:{type:"f",value:.02},seed_x:{type:"f",value:.02},seed_y:{type:"f",value:.02},distortion_x:{type:"f",value:.5},distortion_y:{type:"f",value:.6},col_s:{type:"f",value:.05}},this.exports={glitch:{fragment:this.fragment,uniforms:this.uniforms}},this.material=this.system.fuse([this.exports.glitch]),this.system.register(this)},vr:!0,update:function(){this.bypass=!this.data,this.curF=0,this.generateTrigger()},remove:function(){this.system.unregister(this)},tock:function(){this.uniforms.seed.value=Math.random(),this.curF%this.randX==0?(this.uniforms.amount.value=Math.random()/30,this.uniforms.angle.value=THREE.Math.randFloat(-Math.PI,Math.PI),this.uniforms.seed_x.value=THREE.Math.randFloat(-1,1),this.uniforms.seed_y.value=THREE.Math.randFloat(-1,1),this.uniforms.distortion_x.value=THREE.Math.randFloat(0,1),this.uniforms.distortion_y.value=THREE.Math.randFloat(0,1),this.curF=0,this.generateTrigger()):this.curF%this.randX<this.randX/5&&(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=THREE.Math.randFloat(-Math.PI,Math.PI),this.uniforms.distortion_x.value=THREE.Math.randFloat(0,1),this.uniforms.distortion_y.value=THREE.Math.randFloat(0,1),this.uniforms.seed_x.value=THREE.Math.randFloat(-.3,.3),this.uniforms.seed_y.value=THREE.Math.randFloat(-.3,.3)),this.curF++},generateTrigger:function(){this.randX=THREE.Math.randInt(120,240)},generateHeightmap:function(e){for(var t=new Float32Array(e*e*3),i=e*e,r=0;r<i;r++){var a=THREE.Math.randFloat(0,1);t[3*r+0]=a,t[3*r+1]=a,t[3*r+2]=a}var s=new THREE.DataTexture(t,e,e,THREE.RGBFormat,THREE.FloatType);return s.needsUpdate=!0,s},fragment:["float $rand(vec2 co){","return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","vec2 p = uv;","vec2 p2 = vec2( smoothstep(uvClamp.x, uvClamp.y, p.x),p.y);","float xs = floor(gl_FragCoord.x / 0.5);","float ys = floor(gl_FragCoord.y / 0.5);","vec4 normal = texture2D ($tDisp, p2 * $seed * $seed);","if(p2.y < $distortion_x + $col_s && p2.y > $distortion_x - $col_s * $seed) {","if($seed_x>0.){","p.y = 1. - (p.y + $distortion_y);","}","else {","p.y = $distortion_y;","}","}","if(p2.x < $distortion_y + $col_s && p2.x > $distortion_y - $col_s * $seed) {","if( $seed_y > 0.){","p.x = $distortion_x;","}","else {","p.x = 1. - (p.x + $distortion_x);","}","}","p.x+=normal.x* $seed_x * ($seed/5.);","p.y+=normal.y* $seed_y * ($seed/5.);","vec2 offset = $amount * vec2( cos($angle), sin($angle));","vec4 cr = textureVR(tDiffuse, p + offset);","vec4 cga = textureVR(tDiffuse, p);","vec4 cb = textureVR(tDiffuse, p - offset);","color = vec4(cr.r, cga.g, cb.b, cga.a);","vec4 snow = 200.*$amount*vec4($rand(vec2(xs * $seed,ys * $seed*50.))*0.2);","color = color+ snow;","}"].join("\n")})},function(e,t){AFRAME.registerComponent("godrays",{schema:{tint:{type:"color",default:"#FFFFFF"},threshold:{type:"vec4",default:new THREE.Vector4(0,1,1)},src:{type:"selector",default:null},intensity:{default:1},filter:{type:"array",default:[]},ratio:{default:.25}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.rtFilter=new THREE.WebGLRenderTarget(1,1,e),this.rtTextureGodRays1=new THREE.WebGLRenderTarget(1,1,e),this.rtTextureGodRays2=new THREE.WebGLRenderTarget(1,1,e),this.exports={filter:{includes:["packing"],uniforms:{tint:{type:"c",value:new THREE.Color},threshold:{type:"v2",value:new THREE.Vector2(0,1)}},depth:!0,fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   float v = viewZToOrthographicDepth(perspectiveDepthToViewZ(depth, cameraNear, cameraFar), cameraNear, cameraFar);","   color.rgb = vec3(smoothstep($threshold.x, $threshold.y, v)) * $tint;","}"].join("\n")},blur:{uniforms:{step:{type:"f",value:1},src:{type:"v3",value:new THREE.Vector3(.5,.5,0)}},fragment:["void $main(inout vec4 color, vec4 orig, vec2 uv, float depth) {","vec2 center = vec2(mix(uvClamp.x, uvClamp.y, $src.x), $src.y);","vec2 delta = center - uv;","float dist = length( delta );","vec2 stepv = $step * delta / dist;","float iters = dist/$step;","vec4 col = vec4(0.0);","if ( 0.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 1.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 2.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 3.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 4.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 5.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","color = col/6.0;","}"].join("\n")}},this.materialGodraysGenerate=this.system.fuse([this.exports.blur]),this.uniforms={intensity:{type:"f",value:1},attenuation:{type:"f",value:1},texture:{type:"t",value:this.rtTextureGodRays2}},this.materialFilter=null,this.needsResize=!0,this.system.register(this)},setSize:function(e,t){e=Math.round(e*this.data.ratio),t=Math.round(t*this.data.ratio),this.rtTextureGodRays1.setSize(e,t),this.rtTextureGodRays2.setSize(e,t),this.rtFilter.setSize(e,t)},update:function(e){this.exports.filter.uniforms.tint.value.set(this.data.tint),this.uniforms.intensity.value=this.data.intensity,this.data.filter!==e.filter&&(this.materialFilter&&this.materialFilter.dispose(),this.materialFilter=this.system.fuse(this.data.filter.length?this.data.filter:[this.exports.filter])),this.bypass=null===this.data.src},tock:function(){if(this.system.isActive(this,!0)){var e=this;this.system.tDiffuse.value=this.system.renderTarget.texture,this.system.renderPass(this.materialFilter,this.rtFilter,t);var t=function(t,i,r){var a=new THREE.Vector3,s=new THREE.Vector3,o=e.exports.blur.uniforms.src.value;e.data.src.object3D.getWorldPosition(o),i.getWorldPosition(a),i.getWorldDirection(s),a.sub(o),a.normalize(),s.normalize(),e.uniforms.attenuation.value=Math.pow(Math.max(0,-s.dot(a)),1.33),o.project(i),o.set((o.x+1)/2,(o.y+1)/2,0)},i=1,r=1*Math.pow(6,-i);this.exports.blur.uniforms.step.value=r,this.system.tDiffuse.value=this.rtFilter.texture,this.system.renderPass(this.materialGodraysGenerate,this.rtTextureGodRays2,t),i=2,r=1*Math.pow(6,-i),this.exports.blur.uniforms.step.value=r,this.system.tDiffuse.value=this.rtTextureGodRays2.texture,this.system.renderPass(this.materialGodraysGenerate,this.rtTextureGodRays1,t),i=3,r=1*Math.pow(6,-i),this.exports.blur.uniforms.step.value=r,this.system.tDiffuse.value=this.rtTextureGodRays1.texture,this.system.renderPass(this.materialGodraysGenerate,this.rtTextureGodRays2,t)}},remove:function(){this.rtTextureGodRays1.dispose(),this.rtTextureGodRays2.dispose(),this.rtFilter.dispose(),this.materialGodraysGenerate.dispose(),this.materialFilter.dispose(),this.system.unregister(this)},diffuse:!0,fragment:["float $blendScreen(float base, float blend) {","    return 1.0-((1.0-base)*(1.0-blend));","}","vec3 $blendScreen(vec3 base, vec3 blend) {","    return vec3($blendScreen(base.r,blend.r),$blendScreen(base.g,blend.g),$blendScreen(base.b,blend.b));","}","vec3 $blendScreen(vec3 base, vec3 blend, float opacity) {","    return ($blendScreen(base, blend) * opacity + base * (1.0 - opacity));","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   vec4 texel = texture2D($texture, uv);","   color.rgb = $blendScreen( color.rgb, texel.rgb, $intensity * $attenuation);","}"].join("\n")})},function(e,t,i){var r=i(14),a=i(15);AFRAME.registerComponent("ssao",{schema:{samples:{type:"number",default:16},rings:{type:"number",default:7},radius:{type:"number",default:.5},ratio:{default:.5},intensity:{default:1},maxDepth:{default:.99},bias:{default:.05},scale:{default:.15},blurRadius:{default:7},depthCutoff:{default:10}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTargets=[],this.renderTargets.push(new THREE.WebGLRenderTarget(1,1,e)),this.renderTargets.push(new THREE.WebGLRenderTarget(1,1,e)),this.uniforms={texture:{type:"t",value:this.renderTargets[0].texture},intensity:{type:"f",value:1},maxDepth:{type:"f",value:.99},depthCutoff:{type:"f",default:1}},this.SAOMaterial=null,this.hBlurMaterial=null,this.vBlurMaterial=null,this.sizeUniform={type:"v2",value:new THREE.Vector2},this.system.register(this)},update:function(e){var t=this.data;this.rebuild(t.rings!==e.rings||t.samples!==e.samples,t.blurRadius!==e.blurRadius),this.uniforms.depthCutoff.value=t.depthCutoff,this.uniforms.intensity.value=t.intensity,this.uniforms.maxDepth.value=t.maxDepth,this.SAOMaterial.uniforms.bias.value=t.bias,this.SAOMaterial.uniforms.scale.value=t.scale,this.SAOMaterial.uniforms.kernelRadius.value=t.radius,this.hBlurMaterial.uniforms.depthCutoff.value=t.depthCutoff,this.vBlurMaterial.uniforms.depthCutoff.value=t.depthCutoff},rebuild:function(e,t){var i=this.data;e&&(this.SAOMaterial&&this.SAOMaterial.dispose(),this.SAOMaterial=this.system.materialize(r(!0)),this.SAOMaterial.defines.RINGS=parseInt(i.rings)+".",this.SAOMaterial.defines.SAMPLES=parseInt(i.samples)+".",this.SAOMaterial.uniforms.cameraFar=this.system.cameraFar,this.SAOMaterial.uniforms.cameraNear=this.system.cameraNear),t&&(this.hBlurMaterial&&(this.hBlurMaterial.dispose(),this.vBlurMaterial.dispose()),this.hBlurMaterial=this.system.materialize(a(i.blurRadius,i.blurRadius/2,new THREE.Vector2(1,0))),this.vBlurMaterial=this.system.materialize(a(i.blurRadius,i.blurRadius/2,new THREE.Vector2(0,1))),this.hBlurMaterial.uniforms.size=this.sizeUniform,this.vBlurMaterial.uniforms.size=this.sizeUniform,this.hBlurMaterial.uniforms.cameraFar=this.system.cameraFar,this.hBlurMaterial.uniforms.cameraNear=this.system.cameraNear,this.vBlurMaterial.uniforms.cameraFar=this.system.cameraFar,this.vBlurMaterial.uniforms.cameraNear=this.system.cameraNear)},setSize:function(e,t){e=Math.ceil(e*this.data.ratio),t=Math.ceil(t*this.data.ratio),this.sizeUniform.value.set(e,t),this.renderTargets.forEach((function(i){i.setSize(e,t)}))},tock:function(e){this.system.isActive(this,!0)&&(this.SAOMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(this.el.sceneEl.camera.projectionMatrix),this.SAOMaterial.uniforms.cameraProjectionMatrix.value=this.el.sceneEl.camera.projectionMatrix,this.SAOMaterial.uniforms.tDepth.value=this.el.sceneEl.renderTarget.depthTexture,this.system.renderPass(this.SAOMaterial,this.renderTargets[0],!0),this.data.blurRadius&&(this.hBlurMaterial.uniforms.tDiffuse.value=this.renderTargets[0].texture,this.system.renderPass(this.hBlurMaterial,this.renderTargets[1],!0),this.vBlurMaterial.uniforms.tDiffuse.value=this.renderTargets[1].texture,this.system.renderPass(this.vBlurMaterial,this.renderTargets[0],!0)))},remove:function(){this.SAOMaterial.dispose(),this.hBlurMaterial.dispose(),this.vBlurMaterial.dispose(),this.renderTargets[0].dispose(),this.renderTargets[1].dispose(),this.system.unregister(this)},includes:["packing"],depth:!0,diffuse:!0,fragment:["float $unpackDepth(vec3 pack) {","\tfloat depth = dot( pack, 1.0 / vec3(1.0, 256.0, 256.0*256.0) );","\treturn depth * (256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0);","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   vec4 texel = texture2D($texture, uv);","   float z = perspectiveDepthToViewZ( $unpackDepth(texel.xyz), cameraNear, cameraFar );","   float Z = perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","   color.rgb *= abs(z-Z) > $depthCutoff || Z >= $maxDepth * cameraFar ? 1.0  :  1.0 - texel.a * $intensity;","}"].join("\n")})},function(e,t){e.exports=function(e){return{defines:{},uniforms:{tDepth:{type:"t",value:null},cameraNear:{type:"f",value:1},cameraFar:{type:"f",value:100},cameraProjectionMatrix:{type:"m4",value:new THREE.Matrix4},cameraInverseProjectionMatrix:{type:"m4",value:new THREE.Matrix4},scale:{type:"f",value:1},bias:{type:"f",value:.5},minResolution:{type:"f",value:0},kernelRadius:{type:"f",value:.5},randomSeed:{type:"f",value:0},maxDepth:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#include <common>","#include <packing>","varying vec2 vUv;","uniform sampler2D tDepth;","uniform float cameraNear;","uniform float cameraFar;","uniform mat4 cameraProjectionMatrix;","uniform mat4 cameraInverseProjectionMatrix;","uniform float scale;","uniform float intensity;","uniform float bias;","uniform float kernelRadius;","uniform float minResolution;","uniform float randomSeed;","uniform float maxDepth;","float unpackDepth(vec3 pack) {","\tfloat depth = dot( pack, 1.0 / vec3(1.0, 256.0, 256.0*256.0) );","\treturn depth * (256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0);","}","vec3 packDepth(float depth) {","\tfloat depthVal = depth * (256.0*256.0*256.0 - 1.0) / (256.0*256.0*256.0);","\tvec4 encode = fract( depthVal * vec4(1.0, 256.0, 256.0*256.0, 256.0*256.0*256.0) );","\treturn encode.xyz - encode.yzw / 256.0 + 1.0/512.0;","}","float getViewZ( const in float depth ) {","return perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","}","vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {","float clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];","vec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );","clipPosition *= clipW;","return ( cameraInverseProjectionMatrix * clipPosition ).xyz;","}","vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {","return normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );","}","float scaleDividedByCameraFar;","float minResolutionMultipliedByCameraFar;","float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {","vec3 viewDelta = sampleViewPosition - centerViewPosition;","float viewDistance = length( viewDelta );","float scaledScreenDistance = scaleDividedByCameraFar * viewDistance;","return max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );","}","const float ANGLE_STEP = PI2 * RINGS / SAMPLES;","const float INV_NUM_SAMPLES = 1.0 / SAMPLES;","float getAmbientOcclusion( const in vec3 centerViewPosition) {","scaleDividedByCameraFar = scale;","minResolutionMultipliedByCameraFar = minResolution * cameraFar;","vec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );","float angle = rand( vUv + randomSeed ) * PI2;","vec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES );","vec2 radiusStep = radius;","float occlusionSum = 0.;","float weightSum = 0.;","for( int i = 0; i < int(SAMPLES); i ++ ) {","vec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;","radius += radiusStep;","angle += ANGLE_STEP;","float sampleDepth = textureVR( tDepth, sampleUv ).x;","if( sampleDepth >= ( 1.0 - EPSILON ) ) {","continue;","}","float sampleViewZ = getViewZ( sampleDepth );","vec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );","occlusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );","weightSum += 1.0;","}","if( weightSum == 0.0 ) discard;","return occlusionSum / weightSum;","}","void main() {","vec4 texel = texture2D( tDepth, vUv );","float centerDepth = texel.x;","if( centerDepth >= ( maxDepth - EPSILON ) ) {","discard;","}","float centerViewZ = getViewZ( centerDepth );","vec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );","gl_FragColor =  vec4(packDepth(texel.x), getAmbientOcclusion( viewPosition));","}"].join("\n")}}},function(e,t){THREE.BlurShaderUtils={createSampleWeights:function(e,t){for(var i=function(e,t){return Math.exp(-e*e/(t*t*2))/(Math.sqrt(2*Math.PI)*t)},r=[],a=0;a<=e;a++)r.push(i(a,t));return r},createSampleOffsets:function(e,t){for(var i=[],r=0;r<=e;r++)i.push(t.clone().multiplyScalar(r));return i},configure:function(e,t,i){return{sampleUvOffsets:THREE.BlurShaderUtils.createSampleOffsets(e,i),sampleWeights:THREE.BlurShaderUtils.createSampleWeights(e,t)}}},e.exports=function(e,t,i){e=e||4;var r=THREE.BlurShaderUtils.configure(e,t,i);return{defines:{KERNEL_RADIUS:e},uniforms:{tDiffuse:{type:"t",value:null},size:{type:"v2",value:new THREE.Vector2(512,512)},sampleUvOffsets:{type:"v2v",value:r.sampleUvOffsets},sampleWeights:{type:"1fv",value:r.sampleWeights},depthCutoff:{type:"f",value:10},cameraFar:{type:"f",value:1},cameraNear:{type:"f",value:1e3}},vertexShader:["#include <common>","uniform vec2 size;","varying vec2 vUv;","varying vec2 vInvSize;","void main() {","vUv = uv;","vInvSize = 1.0 / size;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#include <common>","#include <packing>","uniform sampler2D tDiffuse;","uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];","uniform float sampleWeights[ KERNEL_RADIUS + 1 ];","uniform float depthCutoff;","uniform float cameraFar;","uniform float cameraNear;","varying vec2 vUv;","varying vec2 vInvSize;","float unpackDepth(vec3 pack) {","\tfloat depth = dot( pack, 1.0 / vec3(1.0, 256.0, 256.0*256.0) );","\treturn depth * (256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0);","}","float getViewZ( const in float depth ) {","return perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","}","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 orig = texel.xyz;","float depth = unpackDepth( orig );","if( depth >= ( 1.0 - EPSILON ) ) {","discard;","}","float centerViewZ = -getViewZ( depth );","bool rBreak = false, lBreak = false;","float weightSum = sampleWeights[0];","float AOSum = texel.a * weightSum;","for( int i = 1; i <= KERNEL_RADIUS; i ++ ) {","float sampleWeight = sampleWeights[i];","vec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;","vec2 sampleUv = vUv + sampleUvOffset;","texel = textureVR( tDiffuse, sampleUv );","float viewZ = -getViewZ(unpackDepth( texel.xyz ));","if( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;","if( ! rBreak ) {","AOSum += texel.a * sampleWeight;","weightSum += sampleWeight;","}","sampleUv = vUv - sampleUvOffset;","texel = textureVR( tDiffuse, sampleUv );","viewZ = -getViewZ(unpackDepth( texel.xyz ));","if( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;","if( ! lBreak ) {","AOSum += texel.a * sampleWeight;","weightSum += sampleWeight;","}","}","gl_FragColor = vec4(orig, AOSum / weightSum);","}"].join("\n")}}},function(e,t){AFRAME.registerComponent("lighty",{schema:{color:{type:"color",default:"#000000"},radius:{type:"number",default:0},decay:{type:"number",default:1}},init:function(){this.el.sceneEl.systems.effects.addLight(this)},remove:function(){this.el.sceneEl.systems.effects.removeLight(this)}})},function(e,t){THREE.ShaderChunk.lights_pars_maps+=["#if defined TILED_FORWARD","uniform vec4 tileData;","uniform sampler2D tileTexture;","uniform sampler2D lightTexture;","#endif"].join("\n"),THREE.ShaderChunk.lights_fragment_maps+=["","#if defined TILED_FORWARD","vec2 tUv = floor(gl_FragCoord.xy / tileData.xy * 32.) / 32. + tileData.zw;","vec4 tile = texture2D(tileTexture, tUv);","for (int i=0; i < 4; i++) {","\tfloat tileVal = tile.x * 255.;","  \ttile.xyzw = tile.yzwx;","\tif(tileVal == 0.){ continue; }","  \tfloat tileDiv = 128.;","\tfor (int j=0; j < 8; j++) {","  \t\tif (tileVal < tileDiv) {  tileDiv *= 0.5; continue; }","\t\ttileVal -= tileDiv;","\t\ttileDiv *= 0.5;","  \t\tPointLight pointlight;","\t\tfloat uvx = (float(8 * i + j) + 0.5) / 32.;","  \t\tvec4 lightData = texture2D(lightTexture, vec2(uvx, 0.));","  \t\tvec4 lightColor = texture2D(lightTexture, vec2(uvx, 1.));","  \t\tpointlight.position = lightData.xyz;","  \t\tpointlight.distance = lightData.w;","  \t\tpointlight.color = lightColor.rgb;","  \t\tpointlight.decay = lightColor.a;","  \t\tgetPointDirectLightIrradiance( pointlight, geometry, directLight );","\t\tRE_Direct( directLight, geometry, material, reflectedLight );","\t}","}","#endif"].join("\n");var i=AFRAME.utils,r=new THREE.CubeTextureLoader,a={};function s(e){var t={color:new THREE.Color(e.color),emissive:new THREE.Color(e.emissive),emissiveIntensity:e.emissiveIntensity,fog:e.fog,metalness:e.metalness,roughness:e.roughness,wireframe:e.wireframe,wireframeLinewidth:e.wireframeLinewidth};return e.normalMap&&(t.normalScale=e.normalScale),e.ambientOcclusionMap&&(t.aoMapIntensity=e.ambientOcclusionMapIntensity),e.displacementMap&&(t.displacementScale=e.displacementScale,t.displacementBias=e.displacementBias),t}AFRAME.registerShader("standard-fx",{schema:{ambientOcclusionMap:{type:"map"},ambientOcclusionMapIntensity:{default:1},ambientOcclusionTextureOffset:{type:"vec2"},ambientOcclusionTextureRepeat:{type:"vec2",default:{x:1,y:1}},color:{type:"color"},displacementMap:{type:"map"},displacementScale:{default:1},displacementBias:{default:.5},displacementTextureOffset:{type:"vec2"},displacementTextureRepeat:{type:"vec2",default:{x:1,y:1}},emissive:{type:"color",default:"#000"},emissiveIntensity:{default:1},envMap:{default:""},fog:{default:!0},height:{default:256},metalness:{default:0,min:0,max:1},metalnessMap:{type:"map"},metalnessTextureOffset:{type:"vec2"},metalnessTextureRepeat:{type:"vec2",default:{x:1,y:1}},normalMap:{type:"map"},normalScale:{type:"vec2",default:{x:1,y:1}},normalTextureOffset:{type:"vec2"},normalTextureRepeat:{type:"vec2",default:{x:1,y:1}},offset:{type:"vec2",default:{x:0,y:0}},repeat:{type:"vec2",default:{x:1,y:1}},roughness:{default:.5,min:0,max:1},roughnessMap:{type:"map"},roughnessTextureOffset:{type:"vec2"},roughnessTextureRepeat:{type:"vec2",default:{x:1,y:1}},sphericalEnvMap:{type:"map"},src:{type:"map"},width:{default:512},wireframe:{default:!1},wireframeLinewidth:{default:2}},init:function(e){this.material=new THREE.MeshStandardMaterial(s(e)),i.material.updateMap(this,e),e.normalMap&&i.material.updateDistortionMap("normal",this,e),e.displacementMap&&i.material.updateDistortionMap("displacement",this,e),e.ambientOcclusionMap&&i.material.updateDistortionMap("ambientOcclusion",this,e),e.metalnessMap&&i.material.updateDistortionMap("metalness",this,e),e.roughnessMap&&i.material.updateDistortionMap("roughness",this,e),this.updateEnvMap(e),this.material.onBeforeCompile=function(e){e.uniforms.tileData=State.tileData,e.uniforms.tileTexture=State.tileTexture,e.uniforms.lightTexture=State.lightTexture,e.defines.TILED_FORWARD=1}},update:function(e){this.updateMaterial(e),i.material.updateMap(this,e),e.normalMap&&i.material.updateDistortionMap("normal",this,e),e.displacementMap&&i.material.updateDistortionMap("displacement",this,e),e.ambientOcclusionMap&&i.material.updateDistortionMap("ambientOcclusion",this,e),e.metalnessMap&&i.material.updateDistortionMap("metalness",this,e),e.roughnessMap&&i.material.updateDistortionMap("roughness",this,e),this.updateEnvMap(e)},updateMaterial:function(e){var t=this.material;e=s(e),Object.keys(e).forEach((function(i){t[i]=e[i]}))},updateEnvMap:function(e){var t=this,s=this.material,o=e.envMap,n=e.sphericalEnvMap;if(!o&&!n||this.isLoadingEnvMap)return s.envMap=null,void(s.needsUpdate=!0);this.isLoadingEnvMap=!0,n?this.el.sceneEl.systems.material.loadTexture(n,{src:n},(function(e){t.isLoadingEnvMap=!1,e.mapping=THREE.SphericalReflectionMapping,s.envMap=e,i.material.handleTextureEvents(t.el,e),s.needsUpdate=!0})):a[o]?a[o].then((function(e){t.isLoadingEnvMap=!1,s.envMap=e,i.material.handleTextureEvents(t.el,e),s.needsUpdate=!0})):a[o]=new Promise((function(e){i.srcLoader.validateCubemapSrc(o,(function(a){r.load(a,(function(r){t.isLoadingEnvMap=!1,s.envMap=r,i.material.handleTextureEvents(t.el,r),e(r)}))}))}))}})}]);